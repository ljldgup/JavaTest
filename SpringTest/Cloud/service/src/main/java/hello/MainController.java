package hello;

import java.sql.SQLException;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import hello.User;

@Controller    // This means that this class is a Controller
@RequestMapping(path="/demo") // This means URL's start with /demo (after Application path)
public class MainController {
	@Autowired // This means to get the bean called userRepository
	           // Which is auto-generated by Spring, we will use it to handle the data
	private UserRepository userRepository;
	
	@GetMapping(path="/add") // Map ONLY GET Requests
	public @ResponseBody String addNewUser (@RequestParam String name
			, @RequestParam String email) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request
		
		User n = new User();
		n.setName(name);
		n.setEmail(email);
		userRepository.save(n);
		rollback();
		return "Saved";
	}
	
	
	//Transactional事务申明，采用默认设置，新建一个事务TransactionalTest1发生了回滚，TransactionalTest2
	@Transactional
	//@Transactional(rollbackFor = {SQLException.class})
	public void rollback() {
		User n = new User();
		n.setName("TransactionalTest1");
		n.setEmail("123333");
		userRepository.save(n);
	    try{
	    	//@Transactional默认情况下只回滚RuntimeException和Error。可以用rollbackFor = {SQLException.class}
	    	//throw new SQLException("exception");
	    	throw new SQLException("exception");
	    }catch(Exception e){
	       	System.out.println(e);
	    }
	    n = new User();
		n.setName("TransactionalTest2");
		n.setEmail("1234");
		userRepository.save(n);
		userRepository.deleteAll();
	}
	
	@GetMapping(path="/all")
	public @ResponseBody Iterable<User> getAllUsers() {
		// This returns a JSON or XML with the users
		return userRepository.findAll();
	}
}
